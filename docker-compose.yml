version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: f1_dashboard
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped

  # Vector Database
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped

  # Backend API
  backend:
    build: ./backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/f1_dashboard
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - AI_SERVICE_URL=http://ai-service:8001
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # AI Service
  ai-service:
    build: ./ai-service
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - QDRANT_URL=http://qdrant:6333
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/f1_dashboard
    ports:
      - "8001:8001"
    depends_on:
      - qdrant
      - postgres
    restart: unless-stopped

  # F1 Data Processor
  f1-processor:
    build: ./f1-processor
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/f1_dashboard
      - REDIS_URL=redis://redis:6379
      - FASTF1_CACHE_DIR=/app/cache
    volumes:
      - f1_cache:/app/cache
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  f1_cache:
# version: '3.8'
# services:
#   postgres:
#     image: postgres:14
#     environment:
#       POSTGRES_DB: f1_dashboard
#       POSTGRES_USER: f1_user
#       POSTGRES_PASSWORD: f1_password
#     ports:
#       - "5434:5434"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

#   redis:
#     image: redis:7-alpine
#     ports:
#       - "6380:6380"

#   qdrant:
#     image: qdrant/qdrant
#     ports:
#       - "6333:6333"
#     volumes:
#       - qdrant_data:/qdrant/storage

# volumes:
#   postgres_data:
#   qdrant_data: