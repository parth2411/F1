# f1-processor/main.py - Updated for Clean Database
import os
import time
import fastf1
import pandas as pd
from dotenv import load_dotenv
import redis
import psycopg2
from psycopg2.extras import RealDictCursor
import json
from datetime import datetime

# Load environment variables
load_dotenv()

# Configure FastF1
cache_dir = os.getenv('FASTF1_CACHE_DIR', './cache')
os.makedirs(cache_dir, exist_ok=True)
fastf1.Cache.enable_cache(cache_dir)

class F1DataProcessor:
    def __init__(self):
        try:
            self.redis_client = redis.from_url(os.getenv('REDIS_URL', 'redis://localhost:6380'))
        except:
            print("‚ö†Ô∏è Redis not available, continuing without cache")
            self.redis_client = None
        
        self.db_url = os.getenv('DATABASE_URL')
        
    def get_db_connection(self):
        """Get database connection"""
        return psycopg2.connect(self.db_url, cursor_factory=RealDictCursor)
    
    def test_connections(self):
        """Test all connections"""
        try:
            # Test Redis (optional)
            if self.redis_client:
                self.redis_client.ping()
                print("‚úÖ Redis connection successful")
            else:
                print("‚ö†Ô∏è Redis not available, but continuing")
            
            # Test Database (required)
            with self.get_db_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("SELECT 1")
                    print("‚úÖ Database connection successful")
            
            # Test FastF1
            print("‚úÖ FastF1 cache directory:", cache_dir)
            
            return True
        except Exception as e:
            print(f"‚ùå Connection test failed: {e}")
            return False
    
    def create_or_update_team(self, conn, team_name, team_info, year):
        """Create or update team record"""
        try:
            with conn.cursor() as cur:
                # Extract team details
                constructor_name = team_info.get('TeamName', team_name)
                team_color = team_info.get('TeamColor', '#000000')
                
                # Ensure team_color starts with #
                if not team_color.startswith('#'):
                    team_color = '#' + team_color
                
                nationality = team_info.get('CountryCode', 'Unknown')
                
                cur.execute("""
                    INSERT INTO teams (team_name, constructor_name, team_color, nationality, year, is_active)
                    VALUES (%s, %s, %s, %s, %s, %s)
                    ON CONFLICT (team_name, year) DO UPDATE SET
                        constructor_name = EXCLUDED.constructor_name,
                        team_color = EXCLUDED.team_color,
                        nationality = EXCLUDED.nationality,
                        is_active = EXCLUDED.is_active
                    RETURNING id
                """, (team_name, constructor_name, team_color, nationality, year, True))
                
                result = cur.fetchone()
                team_id = result['id'] if result else None
                
                if not team_id:
                    # Get existing team ID
                    cur.execute("SELECT id FROM teams WHERE team_name = %s AND year = %s", (team_name, year))
                    result = cur.fetchone()
                    team_id = result['id'] if result else None
                
                print(f"‚úÖ Team: {team_name} (ID: {team_id})")
                return team_id
                
        except Exception as e:
            print(f"‚ùå Error creating team {team_name}: {e}")
            return None
    
    def create_or_update_driver(self, conn, driver_number, session):
        """Create or update driver record"""
        try:
            # Get driver info from session
            driver_info = session.get_driver(driver_number)
            
            # Extract driver details with better error handling
            full_name = driver_info.get('FullName', f'Driver {driver_number}')
            first_name = driver_info.get('FirstName', '')
            last_name = driver_info.get('LastName', '')
            
            # If first/last name not available, split full name
            if not first_name and not last_name:
                name_parts = full_name.split()
                first_name = name_parts[0] if name_parts else 'Unknown'
                last_name = name_parts[-1] if len(name_parts) > 1 else 'Driver'
            
            abbreviation = driver_info.get('Abbreviation', str(driver_number)[:3])
            team_name = driver_info.get('TeamName', 'Unknown Team')
            nationality = driver_info.get('CountryCode', 'Unknown')
            
            # Create team first
            team_id = self.create_or_update_team(conn, team_name, driver_info, 2023)
            
            with conn.cursor() as cur:
                # Create or update driver
                cur.execute("""
                    INSERT INTO drivers (driver_number, driver_code, full_name, first_name, last_name, 
                                       nationality, team_id, is_active)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT (driver_number) DO UPDATE SET
                        driver_code = EXCLUDED.driver_code,
                        full_name = EXCLUDED.full_name,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name,
                        nationality = EXCLUDED.nationality,
                        team_id = EXCLUDED.team_id,
                        is_active = EXCLUDED.is_active
                """, (
                    str(driver_number), 
                    abbreviation, 
                    full_name, 
                    first_name, 
                    last_name, 
                    nationality, 
                    team_id, 
                    True
                ))
                
                print(f"‚úÖ Driver: {driver_number} - {full_name} ({team_name})")
                
        except Exception as e:
            print(f"‚ùå Error creating driver {driver_number}: {e}")
    
    def get_current_season_schedule(self):
        """Get current season schedule"""
        try:
            current_year = datetime.now().year
            print(f"üìÖ Fetching {current_year} F1 season schedule...")
            
            schedule = fastf1.get_event_schedule(current_year)
            print(f"üìÖ Found {len(schedule)} races for {current_year}")
            
            # Store in database
            with self.get_db_connection() as conn:
                with conn.cursor() as cur:
                    events_added = 0
                    for idx, event in schedule.iterrows():
                        try:
                            # Insert main race session
                            cur.execute("""
                                INSERT INTO f1_sessions (year, round_number, session_type, event_name, 
                                                       country, location, session_date, circuit_info)
                                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                                ON CONFLICT (year, round_number, session_type) DO NOTHING
                            """, (
                                current_year,
                                event['RoundNumber'],
                                'Race',
                                event['EventName'],
                                event['Country'],
                                event['Location'],
                                event['Session5Date'] if pd.notna(event['Session5Date']) else None,
                                json.dumps({
                                    'event_date': str(event['EventDate']) if pd.notna(event['EventDate']) else None,
                                    'circuit_key': event.get('CircuitKey', ''),
                                    'event_format': event.get('EventFormat', 'conventional')
                                })
                            ))
                            
                            # Add other sessions (Practice, Qualifying)
                            sessions = [
                                ('FP1', event.get('Session1Date')),
                                ('FP2', event.get('Session2Date')),
                                ('FP3', event.get('Session3Date')),
                                ('Q', event.get('Session4Date')),
                                ('Race', event.get('Session5Date'))
                            ]
                            
                            for session_type, session_date in sessions:
                                if pd.notna(session_date):
                                    cur.execute("""
                                        INSERT INTO f1_sessions (year, round_number, session_type, event_name, 
                                                               country, location, session_date, circuit_info)
                                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                                        ON CONFLICT (year, round_number, session_type) DO NOTHING
                                    """, (
                                        current_year,
                                        event['RoundNumber'],
                                        session_type,
                                        event['EventName'],
                                        event['Country'],
                                        event['Location'],
                                        session_date,
                                        json.dumps({
                                            'circuit_key': event.get('CircuitKey', ''),
                                            'event_format': event.get('EventFormat', 'conventional')
                                        })
                                    ))
                            
                            events_added += 1
                            
                        except Exception as e:
                            print(f"‚ö†Ô∏è Error inserting event {event.get('EventName', 'Unknown')}: {e}")
                    
                    conn.commit()
                    print(f"‚úÖ Stored {events_added} races with all sessions in database")
            
            return schedule
            
        except Exception as e:
            print(f"‚ùå Error getting schedule: {e}")
            return None
    
    def process_sample_session(self):
        """Process a sample session for testing"""
        try:
            print("üîÑ Processing sample session...")
            print("üì° Loading 2023 Bahrain GP Practice 1 session...")
            
            # Load a sample session
            session = fastf1.get_session(2023, 'Bahrain', 'FP1')
            session.load()
            
            print(f"‚úÖ Session loaded: {session.event['EventName']} - {session.name}")
            print(f"üìä Drivers in session: {len(session.drivers)}")
            
            # Store session info and process data
            with self.get_db_connection() as conn:
                with conn.cursor() as cur:
                    # Insert session
                    cur.execute("""
                        INSERT INTO f1_sessions (year, round_number, session_type, event_name, 
                                               country, location, session_date, is_processed, weather_data)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                        ON CONFLICT (year, round_number, session_type) 
                        DO UPDATE SET 
                            is_processed = EXCLUDED.is_processed,
                            weather_data = EXCLUDED.weather_data
                        RETURNING id
                    """, (
                        2023,
                        1,  # Bahrain is round 1
                        'FP1',
                        session.event['EventName'],
                        session.event['Country'],
                        session.event['Location'],
                        session.date,
                        True,
                        json.dumps([{
                            'time': None,
                            'air_temp': 28,
                            'track_temp': 42,
                            'humidity': 65,
                            'pressure': 1013,
                            'wind_direction': 180,
                            'wind_speed': 12,
                            'rainfall': False
                        }])
                    ))
                    
                    session_id = cur.fetchone()['id']
                    print(f"üìä Session stored with ID: {session_id}")
                    
                    # Create all drivers and teams first
                    print("üë• Creating teams and drivers...")
                    for driver_number in session.drivers:
                        self.create_or_update_driver(conn, driver_number, session)
                    
                    conn.commit()
                    print("‚úÖ All teams and drivers created")
                    
                    # Process lap times for all drivers
                    print("üèéÔ∏è Processing lap times...")
                    total_laps_processed = 0
                    drivers_processed = 0
                    
                    for driver_number in session.drivers:
                        try:
                            print(f"  üìä Processing driver {driver_number}...")
                            driver_laps = session.laps.pick_driver(driver_number)
                            
                            if driver_laps.empty:
                                print(f"  ‚ö†Ô∏è No laps found for driver {driver_number}")
                                continue
                            
                            lap_count = 0
                            for _, lap in driver_laps.iterrows():
                                try:
                                    # Extract compound (tire type)
                                    compound = None
                                    if hasattr(lap, 'Compound') and pd.notna(lap.get('Compound')):
                                        compound = str(lap['Compound'])
                                    
                                    # Extract tyre life
                                    tyre_life = None
                                    if hasattr(lap, 'TyreLife') and pd.notna(lap.get('TyreLife')):
                                        tyre_life = int(lap['TyreLife'])
                                    
                                    cur.execute("""
                                        INSERT INTO lap_times (session_id, driver_number, lap_number, 
                                                             lap_time, sector1_time, sector2_time, sector3_time,
                                                             compound, tyre_life, is_personal_best)
                                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                                        ON CONFLICT DO NOTHING
                                    """, (
                                        session_id,
                                        str(driver_number),
                                        int(lap['LapNumber']),
                                        lap['LapTime'].total_seconds() if pd.notna(lap['LapTime']) else None,
                                        lap['Sector1Time'].total_seconds() if pd.notna(lap['Sector1Time']) else None,
                                        lap['Sector2Time'].total_seconds() if pd.notna(lap['Sector2Time']) else None,
                                        lap['Sector3Time'].total_seconds() if pd.notna(lap['Sector3Time']) else None,
                                        compound,
                                        tyre_life,
                                        lap.get('IsPersonalBest', False)
                                    ))
                                    lap_count += 1
                                    total_laps_processed += 1
                                    
                                except Exception as e:
                                    print(f"    ‚ö†Ô∏è Error inserting lap {lap['LapNumber']}: {str(e)[:100]}...")
                            
                            drivers_processed += 1
                            print(f"  ‚úÖ Driver {driver_number}: {lap_count} laps processed")
                            
                        except Exception as e:
                            print(f"  ‚ùå Error processing driver {driver_number}: {e}")
                            continue
                    
                    conn.commit()
                    print(f"‚úÖ Session processing complete!")
                    print(f"üìä Summary:")
                    print(f"   - Drivers processed: {drivers_processed}/{len(session.drivers)}")
                    print(f"   - Total laps processed: {total_laps_processed}")
                    print(f"   - Session ID: {session_id}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error processing sample session: {e}")
            return False

    def verify_data(self):
        """Verify that data was loaded correctly"""
        try:
            print("\nüîç Verifying loaded data...")
            
            with self.get_db_connection() as conn:
                with conn.cursor() as cur:
                    # Check teams
                    cur.execute("SELECT COUNT(*) as count FROM teams WHERE year = 2023")
                    team_count = cur.fetchone()['count']
                    print(f"üìä Teams (2023): {team_count}")
                    
                    # Check drivers
                    cur.execute("SELECT COUNT(*) as count FROM drivers WHERE is_active = true")
                    driver_count = cur.fetchone()['count']
                    print(f"üèéÔ∏è Active drivers: {driver_count}")
                    
                    # Check sessions
                    cur.execute("SELECT COUNT(*) as count FROM f1_sessions WHERE year = 2023")
                    session_count_2023 = cur.fetchone()['count']
                    print(f"üèÅ 2023 sessions: {session_count_2023}")
                    
                    cur.execute("SELECT COUNT(*) as count FROM f1_sessions WHERE year = 2025")
                    session_count_2025 = cur.fetchone()['count']
                    print(f"üèÅ 2025 sessions: {session_count_2025}")
                    
                    # Check lap times
                    cur.execute("SELECT COUNT(*) as count FROM lap_times")
                    lap_count = cur.fetchone()['count']
                    print(f"‚è±Ô∏è Total lap times: {lap_count}")
                    
                    # Show some sample data
                    cur.execute("""
                        SELECT d.full_name, t.team_name, COUNT(lt.id) as lap_count
                        FROM drivers d
                        JOIN teams t ON d.team_id = t.id
                        LEFT JOIN lap_times lt ON d.driver_number = lt.driver_number
                        WHERE d.is_active = true
                        GROUP BY d.full_name, t.team_name
                        ORDER BY lap_count DESC
                        LIMIT 5
                    """)
                    
                    print("\nüèÜ Top 5 drivers by lap count:")
                    for row in cur.fetchall():
                        print(f"   {row['full_name']} ({row['team_name']}): {row['lap_count']} laps")
                        
            return True
            
        except Exception as e:
            print(f"‚ùå Error verifying data: {e}")
            return False

def main():
    """Main function"""
    print("üèÅ F1 Data Processor Starting...")
    print("üéØ Processing REAL Formula 1 data for your dashboard!")
    
    processor = F1DataProcessor()
    
    # Test connections
    print("\nüîó Testing connections...")
    if not processor.test_connections():
        print("‚ùå Connection tests failed. Please check your database and Redis setup.")
        return
    
    print("\nüìÖ Getting current season schedule...")
    schedule = processor.get_current_season_schedule()
    
    if not schedule is None:
        print(f"‚úÖ Successfully loaded {len(schedule)} races for 2025 season")
    
    print("\nüîÑ Processing real F1 session data...")
    success = processor.process_sample_session()
    
    if success:
        print("\nüîç Verifying loaded data...")
        processor.verify_data()
        
        print("\n" + "="*60)
        print("üéâ F1 Data Processor completed successfully!")
        print("üéØ Your database now contains REAL Formula 1 data:")
        print("")
        print("üìä Available data:")
        print("   ‚úÖ 2023 Bahrain GP Practice 1 session (REAL DATA)")
        print("   ‚úÖ Real F1 drivers with authentic team information")
        print("   ‚úÖ Actual lap times and sector times from the session")
        print("   ‚úÖ Real team colors and driver details")
        print("   ‚úÖ Complete 2025 F1 season schedule")
        print("")
        print("üåê Your F1 dashboard is now powered by authentic Formula 1 data!")
        print("üîó Visit http://localhost:3001/dashboard to see real F1 data")
        print("   - Select Year: 2023")
        print("   - Select Round: 1 (Bahrain)")
        print("   - Select Session: FP1")
        print("")
        print("üöÄ Next steps:")
        print("   - Your backend will now serve real F1 data instead of samples")
        print("   - Dashboard will show actual driver names and lap times")
        print("   - You can add more sessions by running this processor again")
        print("="*60)
    else:
        print("\n‚ùå F1 Data Processor encountered errors")
        print("üí° Check the error messages above and ensure:")
        print("   - Database is running and accessible")
        print("   - Tables were created successfully")
        print("   - Network connection is stable for FastF1 data download")

if __name__ == "__main__":
    main()